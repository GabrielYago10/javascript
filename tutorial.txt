# Lógica de programação
 
# Photshop
 
# front-end
- HTML5 e CSS3
- UX UI
- JavaScript
- Frameworks (bootstrap)
- CMS (wordpress)
 
# banco de dados
 
# sistemas desktop
electron
 
# back-end (Java ou php)
 
# testes
 
# pi
___________________________________
Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados

______________________________________________________
MANDAMENTOS DA programação

1) UX (User eXperience) - desnvolvedor sempre pensando 
na experiencia do usuario.

2)Usar o minimo possivel de codigo (variaveis,operadores,comparadores,estrutura de controle etc)
para resolver o problema (lembrar do marcapasso) 

3) Entender o problema não adianta sentar na frente 
do computador se você não sabe como resolver o problema.
Algoritmo ("receita do bolo")
Conceito:
            variaveis  
entrada - processamento - saída

GIT e GITHUB
 
Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório(clonar um repositorio)
git push (enviar ao repositorio do github)
git add . (adiciona ao repositorio local)
git commit -m "tutorial" (documentar as alterações)
git status (verificar o status do repositorio local)
git pull (sincroniza as informações do repositorio do github) no pc
 
Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token
 
________________________________________________________
Boas praticas ba programação
1) Cabeçalho de documentação
/**
    nome do projeto
    Descrição da classe/função
    @author Thiago nascimento
    @version 1.0
*/
2) nome de arquivos, variaveis, funções, classes, etc 
Regras (clean code)
-Declarar nomes que tenham relação com o problema 
-Não usar espaços, "Ç", acentos e caracteres especiais para
declaração de nomes (erros internos  no programa)
-Só classes iniciam com letra maiuscula
- Não iniciar um nome com numero 
-Quando for declarar dois nomes usar a tecnica do camelo
(camel case)- Usar uma letra maiuscula na segunda palavra
Exemplo
nomecliente no -> nomeCliente
 
__________________________________________________________________________
Comandos basicos do MS-DOS
cls -> limpar a tela
dir ->listar arquivos e diretorio
cd nome_diretorio -> entrar no diretorio
cd .. -> voltar par ao diretorio anterior
 
 
______________________________________________________
Node- Plataforma que permite a execução  do JavaScript 
fora do navegador (browser)
https://nodejs.org/pt (sempre baixar a versão LTS)
 
comandoos basicos:
node -v (versao do node)
 
Gerenciador de pacote para o node 
npm está relacionado a pasta do projeto ou seja
os pacotes são instalados na raiz do projeto e 
não no sistema operacional.
 
npm -v (versao do npm)
npm ls (listar pacotes instalados)
 
npm init (iniciar um novo projeto JavaScript)
|___ package.json

npm i nome_do_pacote (instalar um novo pacote)
npm t nome_do_pacote (remover um pacote)
 
json (JavaScript Objetc Notation)
 
_______________________________________________________
 
variaveis e constantes
 
Uma constante é como uma variável, mas com uma diferença importante:
uma vez que você define o valor de uma constante,
ele não pode ser alterado durante a execução do programa.
 
Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo
e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam
mudar, facilitando a manutenção do código.
 
Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados
e modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor
armazenado pode variar ao longo do tempo, conforme o programa roda.
 
Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.
 
Nas linguagens de programação as variaveis são tipadas ou 
dinamicamente tipadas
 
Existem 3 tipos de variaveis:
 
String -> armazena caracteres e numeros 
Number -> armazena numeros inteiros e nao interios 
Boolean -> true | false

ATENÇÃO: No JS uma variável pode ser criada usando let ou var
var (obsoleto e inseguro), usar sempre o let
 
______________________________________________________
Comando JavaScript  (Sintaxe)
console.log() -> escrver no console 
console.clear() -> Limpar a tela do console 
const -> criar(declarar)uma constantelet ->criar(declerar) uma variavel
typeof() ->verificar o tipo de variavel


______________________________________________________
Estruturas de controle

- Condicionais 
- laços de repetições 

Estruturas de controle condicionais 

if (condição ) {
    //condição verdadeira
}

if (condição) {
    //condi verdadeira
} else {
    //condição falsa
}

Observações:
1) Uma condição nunca pode ser verdadeira e falsa simultaneamente
2) No uso do if-else sempre uma das condições será processada.

if (condicao 1) {
    //condicao 1 verdadeira 
} else if(condicao 2){
    //condicao 2 verdadeira
} else {
    //condição falsa
}

Obs: Nesta etrutura  o else é opcional, porem se indicado 
caso não nenhum condição for verdadeiro ele obrigatoriamente 
executara o que estever no else.

switch (variavel) {
    case 2:
        // codigo  caso o valor 
        da variavel seja  1
    case 2:
        // codigo  caso o valor 
        da variavel seja  2
    default: 
        // opcional, o codigo sera executado se nenhum caso for definido
        break    
}

Estrutura de controle - Laços de repetições 

for (let i = 1; i < 10; i++) {

}

// laços com número de repetição definidas 
// let i = 1 (inicio)
// i < 10 (condição)
// i++ (incremento) i-- (decretamento)


Uso do laço for 
1) Percorrer uma estrutura de dados (Importante)
2) Simplificar o código 
3) Fazer cálculos levando em  conta a variavel intgra 

while (condição) {
    //condição verdadeira
}

do {
    //executando o código uma vez independente da condição e depois analisa a condição 
} while (condição)

As estruturas while e do-while são estruturas de repetições infinitas, ou seja enquanto a condição 
for verdadeira o código interno ser´´a repetido ifinitamente

______________________________________________________
Executado JavaScript junto com o HTML5
- Execução interna no próprio dcumento HTML
- Link com um documento Js (preferenciamente)

______________________________________________________
POO (Programação orientada a objetos)

objeto -> estrutura de dados 

Conceito relacionado relacionado a estrutura de dados:
CRUD (Create Read Update Delete)
São as 4 operações básicas que podemos realizar com a estrutura 
de dados:
Create: Insperação de dados na estrutura
Read: Pesquisa de dados na estrutura
Update: Alteração de dados na estutura 
Delete: Exclusão de dados 

Pilares da programação orientada a objetos
// reutilização 
Abstração 
Herança 
Polimorfismo

// Segurança 
Encapsulamento

Observações:
Toda classe modelo obrigatoriamente deve iniciar com
letra maiuscula

Dica: 

Classe (Biologia Ex: Mamiferos)

Lingua Portuguesa:
Objeto (subtantivo)
atributo (adjetivo)
Métodos (verbos)

______________________________________________________
Estruturas de dados (array,vetor ou lista)
É uma forma especial de trabalhar com variaveis, podendo 
armazenar mais de um valor em uma única variável.
Para manipular os dados de um vetor usamos o incice que 
sempre inicia em 0 (zero)

Usos do vetor:
1) Simplificar e minimizar o código 
2) Problemas que precisam armazenar dados em uma sequência
(ex: jogo GENIUS)
3) estrutura de dados e operações com o banco de dados 
